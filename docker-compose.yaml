services:
  consul_server:
    image: "consul:1.15.4"
    container_name: "consul-server"
    ports:
      - "8500:8500"   # UI/API
      - "8600:8600/udp" # DNS
    volumes:
      - ./consul:/consul/config
    command: "agent -dev -client=0.0.0.0"
    networks:
      - bhai_deploy_kar_de_network
  postgres_server:
    image: "postgres"
    container_name: "postgres-server"
    ports:
      - "5432:5432"
    env_file:
      - ./envs/postgres.env
    volumes:
      - postgres_data_bhai_deploy_kar_de:/var/lib/postgresql/data
    networks:
      - bhai_deploy_kar_de_network

  clickhouse_server:
    image: "clickhouse/clickhouse-server"
    container_name: "clickhouse-server"
    ports:
      - "8123:8123"
      - "9000:9000"
    env_file:
      - ./envs/clickhouse.env
    volumes:
      - clickhouse_data_bhai_deploy_kar_de:/var/lib/clickhouse
    networks:
      - bhai_deploy_kar_de_network

  bot_server:
    container_name: "bot-server"
    build:
      context: ./bot-server
      dockerfile: Dockerfile
    env_file:
      - ./bot-server/.env
    ports:
      - "9003:9003"
    dns:
      - 8.8.8.8
      - 8.8.4.4
      - 1.1.1.1
    environment:
      - HTTP_PROXY=
      - HTTPS_PROXY=
      - NO_PROXY=localhost,127.0.0.1,api.telegram.org
    depends_on:
      postgres_server:
        condition: service_started
      consul_server:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - bhai_deploy_kar_de_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
      - "api.telegram.org:149.154.167.220"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bhai_deploy_kar_de_network

  kafka:
    image: confluentinc/cp-kafka:7.3.3
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"   # for inside docker access
      - "9093:9093"   # for host access
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      CLUSTER_ID: "log-service"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bhai_deploy_kar_de_network

  log_server:
    container_name: "log-server"
    build:
      context: ./log-server
      dockerfile: Dockerfile
    env_file:
      - ./log-server/.env
    ports:
      - "9001:9001"
    depends_on:
      clickhouse_server:
        condition: service_started
      consul_server:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - bhai_deploy_kar_de_network

  reverse_proxy_server:
    container_name: "reverse-proxy-server"
    build:
      context: ./reverse-proxy
      dockerfile: Dockerfile
    env_file:
      - ./reverse-proxy/.env
    ports:
      - "9002:9002"
    depends_on:
      - postgres_server
    networks:
      - bhai_deploy_kar_de_network
  # build_server:
  #   container_name: "build_server"
  #   build:
  #     context: ./build-server
  #     dockerfile: Dockerfile
  #   env_file:
  #     - ./build-server/.env
  #   ports:
  #     - "9003:9003"
  
networks:
  bhai_deploy_kar_de_network:
    driver: bridge

volumes:
  postgres_data_bhai_deploy_kar_de:
  clickhouse_data_bhai_deploy_kar_de: